<svg fill="none" viewBox="0 0 1000 400" width="100%" height="auto" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg">
    <style>
        .ruler-text {
            font-family: monospace;
            font-size: 11px;
            fill: #333;
        }
        .ruler-line {
            stroke: #666;
            stroke-width: 1;
        }
        .ruler-major {
            stroke: #333;
            stroke-width: 2;
        }
        .ruler-minor {
            stroke: #999;
            stroke-width: 0.5;
        }
        .grid {
            stroke: #666;
            stroke-width: 0.5;
            opacity: 0.1;
        }
    </style>

    <script type="text/javascript"><![CDATA[
        function generateRulers() {
            const width = 1000;
            const height = 400;
            const majorInterval = 100;
            const minorInterval = 10;

            // 横方向の定規を生成
            const hRuler = document.createElementNS("http://www.w3.org/2000/svg", "g");
            hRuler.setAttribute("id", "horizontal-ruler");

            // ベースライン
            const baseLine = document.createElementNS("http://www.w3.org/2000/svg", "line");
            baseLine.setAttribute("x1", "0");
            baseLine.setAttribute("y1", "20");
            baseLine.setAttribute("x2", width);
            baseLine.setAttribute("y2", "20");
            baseLine.setAttribute("class", "ruler-line");
            hRuler.appendChild(baseLine);

            // 目盛りを生成
            for (let x = 0; x <= width; x += minorInterval) {
                const isMajor = x % majorInterval === 0;
                const tick = document.createElementNS("http://www.w3.org/2000/svg", "line");
                tick.setAttribute("x1", x);
                tick.setAttribute("y1", isMajor ? 15 : 18);
                tick.setAttribute("x2", x);
                tick.setAttribute("y2", isMajor ? 25 : 22);
                tick.setAttribute("class", isMajor ? "ruler-major" : "ruler-minor");
                hRuler.appendChild(tick);

                if (isMajor) {
                    const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                    text.setAttribute("x", x);
                    text.setAttribute("y", 40);
                    text.setAttribute("class", "ruler-text");
                    text.setAttribute("text-anchor", "middle");
                    text.textContent = x;
                    hRuler.appendChild(text);
                }
            }

            // 縦方向の定規を生成
            const vRuler = document.createElementNS("http://www.w3.org/2000/svg", "g");
            vRuler.setAttribute("id", "vertical-ruler");

            // ベースライン
            const vBaseLine = document.createElementNS("http://www.w3.org/2000/svg", "line");
            vBaseLine.setAttribute("x1", "20");
            vBaseLine.setAttribute("y1", "0");
            vBaseLine.setAttribute("x2", "20");
            vBaseLine.setAttribute("y2", height);
            vBaseLine.setAttribute("class", "ruler-line");
            vRuler.appendChild(vBaseLine);

            // 目盛りを生成
            for (let y = 0; y <= height; y += minorInterval) {
                const isMajor = y % majorInterval === 0;
                const tick = document.createElementNS("http://www.w3.org/2000/svg", "line");
                tick.setAttribute("x1", isMajor ? 15 : 18);
                tick.setAttribute("y1", y);
                tick.setAttribute("x2", isMajor ? 25 : 22);
                tick.setAttribute("y2", y);
                tick.setAttribute("class", isMajor ? "ruler-major" : "ruler-minor");
                vRuler.appendChild(tick);

                if (isMajor) {
                    const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                    text.setAttribute("x", 30);
                    text.setAttribute("y", y);
                    text.setAttribute("class", "ruler-text");
                    text.setAttribute("dominant-baseline", "middle");
                    text.textContent = y;
                    vRuler.appendChild(text);
                }
            }

            // グリッドを生成
            const grid = document.createElementNS("http://www.w3.org/2000/svg", "g");
            grid.setAttribute("class", "grid");

            // 横線
            for (let y = minorInterval; y < height; y += minorInterval) {
                const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                line.setAttribute("x1", "0");
                line.setAttribute("y1", y);
                line.setAttribute("x2", width);
                line.setAttribute("y2", y);
                grid.appendChild(line);
            }

            // 縦線
            for (let x = minorInterval; x < width; x += minorInterval) {
                const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                line.setAttribute("x1", x);
                line.setAttribute("y1", "0");
                line.setAttribute("x2", x);
                line.setAttribute("y2", height);
                grid.appendChild(line);
            }

            // 要素を追加
            document.querySelector("svg").appendChild(grid);
            document.querySelector("svg").appendChild(hRuler);
            document.querySelector("svg").appendChild(vRuler);
        }

        // SVGが読み込まれたら実行
        window.addEventListener("load", generateRulers);
    ]]></script>

    <!-- サイズ表示 -->
    <text x="500" y="200" text-anchor="middle" class="ruler-text" font-size="24">
        1000 x 400
    </text>
</svg>